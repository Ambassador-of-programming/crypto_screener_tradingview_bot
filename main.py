import concurrent.futures
import os
import telebot
import pandas as pd
import datetime as dt
import plotly.graph_objects as go

from time import sleep
from telebot import types
from coin_data import pd_datas
from config.TOKEN_telegram import TOKEN
from tradingview_ta import TA_Handler, Interval, Exchange


# –ü–µ—Ä–µ—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
all_coins = pd.Series(['BTCUSDT', 'ETHUSDT', 'DOGE_USDT', 'BNBUSDT',], copy=False)

while True:
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
    bot = telebot.TeleBot(TOKEN, parse_mode=None)

    # –£–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    name_channel = '@HereWriteTelegramGroup'
    
    
    def moving_averages():
        for coin in all_coins:
            tesla = TA_Handler(
                symbol=coin,
                exchange="BINANCE",
                screener="CRYPTO",
                interval=Interval.INTERVAL_4_HOURS, 
            )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ moving_averages  
        rec = tesla.get_analysis().moving_averages

        def strong_buy():
            if rec['RECOMMENDATION'] == 'STRONG_BUY':
                today = dt.datetime.now()
                one_month_ago = today - dt.timedelta(days=2)
                dataset = pd_datas(coin, '5m', one_month_ago, today)
                dataset['Datetime'] = dataset['Datetime'].map(lambda x: dt.datetime.fromtimestamp(x / 1000.0))
                dataset['new'] = dataset['Datetime']

                fig = go.Figure([go.Scatter(x=dataset['Datetime'], y=dataset['Close'])])
                fig.update_layout(title=f"–ú–æ–Ω–µ—Ç–∞: {coin}  –í—Ä–µ–º—è: {dt.datetime.now()}")
                fig.write_image("image/strong_buy_moving_averages.png", scale=5)
                bot.send_photo(name_channel, photo=open('image/strong_buy_moving_averages.png', 'rb'))

                link = f"https://www.binance.com/ru/futures/{coin}"
                markup = types.InlineKeyboardMarkup()
                link_button = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Binance', url=link)
                markup.add(link_button)
                bot.send_message(name_channel, f'''
üí£–ï—Å—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ STRONG BUY\n
üß†–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞: moving_averages\n
ü•á–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã: {coin}\n
üìà–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {dataset.tail(1)['Close'].value_counts().index[-1]}\n
üëá–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].min()} ({dataset.loc[dataset["Close"].idxmin(), "Datetime"]})\n
üëÜ–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].max()} ({dataset.loc[dataset["Close"].idxmax(), "Datetime"]})\n
üí∞–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].mean()}
                ''', reply_markup=markup)
                os.remove("image/strong_buy_moving_averages.png")
                sleep(1800)

        def strong_sell():
            if rec['RECOMMENDATION'] == 'STRONG_SELL':
                today = dt.datetime.now()
                one_month_ago = today - dt.timedelta(days=2)
                dataset = pd_datas(coin, '5m', one_month_ago, today)
                dataset['Datetime'] = dataset['Datetime'].map(lambda x: dt.datetime.fromtimestamp(x / 1000.0))
                dataset['new'] = dataset['Datetime']

                fig = go.Figure([go.Scatter(x=dataset['Datetime'], y=dataset['Close'])])
                fig.update_layout(title=f"–ú–æ–Ω–µ—Ç–∞: {coin}  –í—Ä–µ–º—è: {dt.datetime.now()}")
                fig.write_image("image/strong_sell_moving_averages.png", scale=5)
                bot.send_photo(name_channel, photo=open('image/strong_sell_moving_averages.png', 'rb'))

                link = f"https://www.binance.com/ru/futures/{coin}"
                markup = types.InlineKeyboardMarkup()
                link_button = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Binance', url=link)
                markup.add(link_button)
                bot.send_message(name_channel, f'''
üçí–ï—Å—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ STRONG SELL\n
üß†–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞: moving_averages\n
ü•á–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã: {coin}\n
üìà–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {dataset.tail(1)['Close'].value_counts().index[-1]}\n
üëá–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].min()} ({dataset.loc[dataset["Close"].idxmin(), "Datetime"]})\n
üëÜ–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].max()} ({dataset.loc[dataset["Close"].idxmax(), "Datetime"]})\n
üí∞–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].mean()}\n
                ''', reply_markup=markup)

                os.remove("image/strong_sell_moving_averages.png")
                sleep(1800)

        # –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ 2 —Ñ—É–∫–Ω—Ü–∏–∏
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future1 = executor.submit(strong_buy)
            future2 = executor.submit(strong_sell)


    def oscillators():
        for coin in all_coins:
            tesla = TA_Handler(
                symbol=coin,
                exchange="BINANCE",
                screener="CRYPTO",
                interval=Interval.INTERVAL_4_HOURS, 
            )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ oscillators
        rec = tesla.get_analysis().oscillators

        def strong_buy():
            if rec['RECOMMENDATION'] == 'STRONG_BUY':
                today = dt.datetime.now()
                one_month_ago = today - dt.timedelta(days=2)
                dataset = pd_datas(coin, '5m', one_month_ago, today)
                dataset['Datetime'] = dataset['Datetime'].map(lambda x: dt.datetime.fromtimestamp(x / 1000.0))
                dataset['new'] = dataset['Datetime']

                fig = go.Figure([go.Scatter(x=dataset['Datetime'], y=dataset['Close'])])
                fig.update_layout(title=f"–ú–æ–Ω–µ—Ç–∞: {coin}  –í—Ä–µ–º—è: {dt.datetime.now()}")
                fig.write_image("image/strong_buy_oscillators.png", scale=5)
                bot.send_photo(name_channel, photo=open('image/strong_buy_oscillators.png', 'rb'))

                link = f"https://www.binance.com/ru/futures/{coin}"
                markup = types.InlineKeyboardMarkup()
                link_button = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Binance', url=link)
                markup.add(link_button)
                bot.send_message(name_channel, f'''
üí£–ï—Å—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ STRONG BUY\n
üß†–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞: oscillators\n
ü•á–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã: {coin}\n
üìà–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {dataset.tail(1)['Close'].value_counts().index[-1]}\n
üëá–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].min()} ({dataset.loc[dataset["Close"].idxmin(), "Datetime"]})\n
üëÜ–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].max()} ({dataset.loc[dataset["Close"].idxmax(), "Datetime"]})\n
üí∞–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].mean()}
            ''', reply_markup=markup)
            os.remove("image/strong_buy_oscillators.png")
            sleep(1800)

        def strong_sell():
            if rec['RECOMMENDATION'] == 'STRONG_SELL':
                today = dt.datetime.now()
                one_month_ago = today - dt.timedelta(days=2)
                dataset = pd_datas(coin, '5m', one_month_ago, today)
                dataset['Datetime'] = dataset['Datetime'].map(lambda x: dt.datetime.fromtimestamp(x / 1000.0))
                dataset['new'] = dataset['Datetime']

                fig = go.Figure([go.Scatter(x=dataset['Datetime'], y=dataset['Close'])])
                fig.update_layout(title=f"–ú–æ–Ω–µ—Ç–∞: {coin}  –í—Ä–µ–º—è: {dt.datetime.now()}")
                fig.write_image("image/strong_sell_oscillators.png", scale=5)
                bot.send_photo(name_channel, photo=open('image/strong_sell_oscillators.png', 'rb'))

                link = f"https://www.binance.com/ru/futures/{coin}"
                markup = types.InlineKeyboardMarkup()
                link_button = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Binance', url=link)
                markup.add(link_button)
                bot.send_message(name_channel, f'''
üçí–ï—Å—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ STRONG SELL\n
üß†–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞: oscillators\n
ü•á–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã: {coin}\n
üìà–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {dataset.tail(1)['Close'].value_counts().index[-1]}\n
üëá–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].min()} ({dataset.loc[dataset["Close"].idxmin(), "Datetime"]})\n
üëÜ–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].max()} ({dataset.loc[dataset["Close"].idxmax(), "Datetime"]})\n
üí∞–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è: {dataset["Close"].mean()}\n
            ''', reply_markup=markup)

                os.remove("image/strong_sell_oscillators.png")
                sleep(1800)

        # –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ 2 —Ñ—É–∫–Ω—Ü–∏–∏
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future3 = executor.submit(strong_buy)
            future4 = executor.submit(strong_sell)
    
    #–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ 2 —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ moving_averages –∏ oscillators
    with concurrent.futures.ThreadPoolExecutor() as executor:
            future5 = executor.submit(moving_averages)
            future6 = executor.submit(oscillators)
